What happens when you initialize a repository? Why do you need to do it?
	a '.git' directory is created that contains metadata about the files inside the directory in which the repository is initialized.
	This directory keeps track of all the modifications (i.e commits) made to the files in the repository. 
	It's necessary to initialize a repository because this '.git' directory is the one that allows git to control the commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	It offers a 'middel point' to organize the changes made. It allows you to bundle different files in a single commit in case
	its necessary. Its different from the repository and the working directory because its actually a conection between the two
	the files go from the WD to the SA to the repository in that order. It provides a tool for better organization of commits.

How can you use the staging area to make sure you have one commit per logical change?
	You can sanity check all the changes made to all the files before you commit in an ordered manner. You also decide which files
	and in which order you are going to commit them.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Every time you want to try new features that you are still not sure are going to work you can create a branch and experiment with it.

How do the diagrams help you visualize the branch structure?
	It allows to see clearly the reachability of each commit by looking at every commit-parent pair.
	It shows the flow of the repository and all its branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	It creates a new commit for the branch that's currently check out. This commit includes all the changes made in the current branch
	plus the code added in the branch to be merged. This most recent commit (the merge) has two parents: the latest commit of the
	branch that was check out and the most recent commit of the merged branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	The pros of Git's automatic merging are that you don't have to go to the trouble of manually merging both branches. The cons are that you don't get to see directly the specific changes in the two version and how they fuse into the final version before doing the merge
	


	
